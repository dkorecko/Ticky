@page "/boards/settings/{Id:int}"
@using System.Reflection
@using System.Text.Json
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject ILogger<BoardSettings> _logger
@inject NavigationManager _navigationManager
@inject IJSRuntime _js
@inherits NotifiableBase

<AddLabelModal @ref="_addLabelModal" OnSubmit="() => RunNotification(typeof(Label), OperationType.Added)" />
<EditLabelModal @ref="_editLabelModal" OnSubmit="() => RunNotification(typeof(Label), OperationType.Edited)" />
<EditCardModal @ref="_editCardModal" OnSubmit="HandleUpdate" />
<DeleteConfirmationDialog T="Label" @ref="_deleteLabelModal" OnConfirmed="HandleUpdate"/>
<DeleteConfirmationDialog T="Card" @ref="_deleteCardModal" OnConfirmed="HandleUpdate" />

<div class="w-full">
    <section class="flex w-full max-w-4xl flex-grow flex-col gap-5 overflow-y-auto px-12 py-14">
        <header class="flex flex-row justify-between text-2xl font-bold">
            Board settings
        </header>

        <section
            class="flex w-full flex-row flex-wrap items-center justify-start gap-1 rounded-lg border border-tab-outline px-1 py-1 text-sm">
            <div data-active='@(_tab == 1 ? "true" : "false")' class="settings-menu-item" @onclick="async () => await GoToTab(1)">General</div>
            <div data-active='@(_tab == 2 ? "true" : "false")' class="settings-menu-item" @onclick="async () => await GoToTab(2)">Labels</div>
            <div data-active='@(_tab == 3 ? "true" : "false")' class="settings-menu-item" @onclick="async () => await GoToTab(3)">Snoozed cards</div>
            <div data-active='@(_tab == 4 ? "true" : "false")' class="settings-menu-item" @onclick="async () => await GoToTab(4)">Repeating cards [BETA]</div>
            <div data-active='@(_tab == 5 ? "true" : "false")' class="settings-menu-item" @onclick="async () => await GoToTab(5)">Export</div>
        </section>

        @if(_board is null)
        {
            <Spinner/>
        } else {
            <section class="flex w-full flex-col divide-y divide-tab-outline">
                @if(_tab == 1)
                {
                    <div class="flex flex-col py-5">
                        <label class="font-bold">Board settings</label>
                        <label class="text-sm opacity-70">All the most important settings for this specific board, which do not belong to any other categories.</label>
                    </div>
                    <div class="settings-item">
                        <div class="flex flex-col text-sm">
                            <label class="font-bold opacity-90">Disable sorting animations</label>
                            <label class="w-4/5 max-w-2xl opacity-70">With many cards in a column, animating their movement can cause lag. If you're experiencing this or prefer a quicker snap to position, enable this option.'</label>
                        </div>

                        <input type="checkbox" class="switch" checked=@_board.DisableSortingAnimations @onchange="(e) => OnSettingChanged(e, x => x.DisableSortingAnimations)">
                    </div>
                } else if (_tab == 2)
                {
                    if(_labels is null)
                    {
                        <Spinner />
                    } else {
                        <div class="flex flex-col py-5">
                            <label class="font-bold">Labels</label>
                            <label class="text-sm opacity-70">The settings for what labels are available for assignment to cards.</label>
                        </div>

                        <div class="flex flex-col gap-2 py-5">
                            @foreach (var label in _labels)
                            {
                                <div class="flex flex-row items-center">
                                    <LabelView Label="label" />
                                    <label class="ml-2 text-xs">Used on @label.OnCards.Count cards</label>
                                    <i class="fa fa-pencil edit-icon ml-2" @onclick="() => _editLabelModal?.Open(_board, label)"></i>
                                    <i class="fa fa-trash-can edit-icon hover:text-red-button-hover" @onclick="() => _deleteLabelModal!.OpenDialog(label)"></i>
                                </div>
                            }
                        </div>

                        <button @onclick="() => _addLabelModal?.Open(_board)">Create a label</button>
                    }
                } else if(_tab == 5)
                {
                    <div class="flex flex-col py-5">
                        <label class="font-bold">Export</label>
                        <label class="text-sm opacity-70">Export the board to a JSON file, currently only for debugging purposes.</label>
                    </div>
                    <div class="flex flex-col gap-2 py-5">
                        <button disabled=@_isLoading class="btn btn-primary" @onclick="ExportBoard">
                            @if(_isLoading) 
                            {
                                <Spinner Small=true/>
                            } else 
                            {
                                <span>Export board</span>
                            }
                        </button>
                    </div>

                }
                else if (_cards is null)
                {
                    <Spinner/>
                } else if(_tab == 3)
                {
                    <div class="flex flex-col py-5">
                        <label class="font-bold">Snoozed cards</label>
                        <label class="text-sm opacity-70">The list of cards that have been snoozed.</label>
                    </div>

                    <div class="flex flex-col gap-2 py-5">
                        @foreach(var snoozedCard in _cards)
                        {
                            <CardView Card="snoozedCard" DeleteCardModal="_deleteCardModal" EditCardModal="_editCardModal" BoardCode=@_board.Code Members="_members" OnCardUpdated="HandleUpdate" Columns="_board.Columns"/>
                        }
                    </div>
                } else if(_tab == 4)
                {
                    <div class="flex flex-col py-5">
                        <label class="font-bold">Repeat cards [BETA]</label>
                        <label class="text-sm opacity-70">The list of cards that are created on a repeating basis.</label>
                    </div>

                    <div class="flex flex-col gap-2 py-5">
                        @foreach(var repeatCard in _cards)
                        {
                            <CardView Card="repeatCard" DeleteCardModal="_deleteCardModal" EditCardModal="_editCardModal" BoardCode=@_board.Code Members="_members" OnCardUpdated="HandleUpdate" Columns="_board.Columns" LongFormRepeat=true/>
                        }
                    </div>
                }
            </section>
        }
    </section>
</div>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public int Id { get; set; } = default!;

    private int _tab = 1;

    private Board? _board;
    private List<User> _members = [];
    private List<Label>? _labels;
    private List<Card>? _cards;
    private AddLabelModal? _addLabelModal;
    private EditLabelModal? _editLabelModal;
    private EditCardModal? _editCardModal;
    private DeleteConfirmationDialog<Label>? _deleteLabelModal;
    private DeleteConfirmationDialog<Card>? _deleteCardModal;
    private bool _isLoading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await HandleUpdate();
    }

    private async Task LoadBoard()
    {
        using var db = _dbContextFactory.CreateDbContext();

        var board = await db.Boards
            .Include(x => x.Project)
                .ThenInclude(x => x.Memberships)
                    .ThenInclude(x => x.User)
            .Include(x => x.Memberships)
                .ThenInclude(x => x.User)
            .Include(x => x.Columns)
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id.Equals(Id));

        if (board is null || !board.VerifyAccess(_user))
        {
            MainLayout.RunNotification(new("This board either does not exist or you do not have access.", NotificationType.Fail));
            _navigationManager.NavigateTo("/");
            return;
        }

        _members = [];

        if (board.Memberships.Any())
            _members.AddRange(board.Memberships.Select(x => x.User));

        if (board.Project.Memberships.Any())
            _members.AddRange(board.Project.Memberships.Select(x => x.User));

        _members = _members.DistinctBy(x => x.Id).ToList();

        _members = [];

        if (board.Memberships.Any())
            _members.AddRange(board.Memberships.Select(x => x.User));

        if (board.Project.Memberships.Any())
            _members.AddRange(board.Project.Memberships.Select(x => x.User));

        _members = _members.DistinctBy(x => x.Id).ToList();
        _board = board;
    }

    protected override async Task HandleUpdate()
    {
        using var db = _dbContextFactory.CreateDbContext();

        await LoadBoard();

        if (_tab == 2)
            _labels = await db.Labels
                .Where(x => x.BoardId.Equals(Id))
                .Include(x => x.OnCards)
                .AsNoTracking()
                .ToListAsync();
        else if (_tab == 3)
            _cards = await GetCardsBasedOnCondition(db, x => x.SnoozedUntil.HasValue);
        else if (_tab == 4)
            _cards = await GetCardsBasedOnCondition(db, x => x.RepeatInfo != null);

        await base.HandleUpdate();
    }

    private async Task GoToTab(int tabNumber) 
    {
        _tab = tabNumber;
        await HandleUpdate();
    }

    private async Task<List<Card>> GetCardsBasedOnCondition(DataContext db, Expression<Func<Card, bool>> condition)
        => await db.Boards
            .Where(x => x.Id.Equals(Id))
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
            .SelectMany(x => x.Columns)
            .SelectMany(x => x.Cards)
            .Where(condition)
            .Include(x => x.Labels)
            .Include(x => x.CreatedBy)
            .Include(x => x.Assignees)
            .Include(x => x.Attachments)
            .Include(x => x.Subtasks)
            .Include(x => x.TimeRecords)
            .AsNoTracking()
            .ToListAsync();

    private async void OnSettingChanged(ChangeEventArgs e, Expression<Func<Board, bool>> setter)
    {
        ArgumentNullException.ThrowIfNull(_board);

        if (e.Value is not bool val)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var board = await db.Boards.FirstOrDefaultAsync(x => x.Id.Equals(_board.Id));

        if (board is null)
            return;

        if (setter.Body is MemberExpression memberExpression && memberExpression.Member is PropertyInfo propertyInfo && propertyInfo.PropertyType == typeof(bool))
            propertyInfo.SetValue(board, val);
        else throw new Exception("Invalid property provided.");

        await db.SaveChangesAsync();

        await RunNotification(typeof(BoardSettings), OperationType.Edited);
    }

    private async Task ExportBoard()
    {
        _isLoading = true;
        StateHasChanged();

        using var db = _dbContextFactory.CreateDbContext();

        var board = await db.Boards
            .AsNoTracking()
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.Labels)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.TimeRecords)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.Reminders)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.Comments)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.Activities)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.Assignees)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.Attachments)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.LinkedIssuesOne)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.LinkedIssuesTwo)
            .Include(x => x.Columns)
                .ThenInclude(x => x.Cards)
                    .ThenInclude(x => x.Subtasks)
            .Include(x => x.Memberships)
                .ThenInclude(x => x.User)
            .Include(x => x.Labels)
            .Include(x => x.Project)
                .ThenInclude(x => x.Memberships)
            .FirstAsync(x => x.Id.Equals(Id));

        await _js.InvokeVoidAsync("downloadJsonText", $"{board.Name}_{board.CreatedAt.Ticks}.json", JsonSerializer.Serialize(board, new JsonSerializerOptions
        {
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles
        }));

        _isLoading = false;
        StateHasChanged();
        MainLayout.RunNotification(new("Board exported successfully."));
    }
}
