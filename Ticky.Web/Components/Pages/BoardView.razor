@page "/boards/{Id:int}/{CardId:int?}"
@using System.Security.Cryptography
@inject NavigationManager _navigationManager
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject CardNumberingService _cardNumberingService
@inject ProtectedLocalStorage _protectedLocalStorage
@inject IJSRuntime _js
@inject ILogger<BoardView> _logger
@inherits NotifiableBase
@implements IDisposable

@if (_board is not null)
{
    <PageTitle>
        @_board.Name - @Constants.APP_NAME
    </PageTitle>
}

<CreateColumnModal @ref="_createColumnModal" OnSubmit="async () => await RunNotification(typeof(Column), OperationType.Added)" />
<EditColumnModal @ref="_editColumnModal" OnSubmit="async () => await RunNotification(typeof(Column), OperationType.Edited)" />
<DeleteConfirmationDialog T="Column" @ref="_deleteColumnModal" OnConfirmed="HandleUpdate" />
<DeleteConfirmationDialog T="Card" @ref="_deleteTaskModal" OnConfirmed="HandleUpdate" />
<EditCardModal @ref="_editCardModal" OnSubmit="OnTaskEdited" />
<EditBoardMembershipsModal @ref="_editBoardMembershipsModal" OnSubmit="async () => await RunNotification(typeof(BoardMembership), OperationType.Edited)" />
<FilterCardsModal @ref="_filterCardsModal" Model="_filterModel" SearchUpdated="LoadCardsAsync" BoardMembers="_members" BoardLabels="_labels" />

<div class="flex w-screen flex-col divide-y divide-tab-outline">
    <header id="board-header" class="flex flex-row items-center justify-end gap-1 px-2 py-2 text-2xl font-bold sm:gap-5 sm:px-12">
        @if(_board is null)
        {
            <Spinner/>
        } else {
            <label class="mr-auto text-sm text-ellipsis md:text-xl">@_board.Name <label class="text-2xs font-normal text-ellipsis">(Project @_board.Project.Name)</label></label>

            <div class="hidden flex-row gap-1 2xs:flex">
                @{
                    var i = 0;
                }
                @foreach(var member in _members)
                {
                    string id = $"avatar_{i}";
                    <div id="@id" class="avatar stack-avatars" style="background-image: url('@Constants.ACCESS_UPLOADED_IMAGES_PATH/@member.ProfilePictureFileName');" @onclick="() => MainLayout.UserInfoModal?.Open(id, member.Id)"></div>
                    i++;
                }
                @if (IsAdmin())
                {
                    <div class="avatar add" @onclick="() => _editBoardMembershipsModal?.Open(_board.Id, _board.ProjectId)" title="Add member">
                        <i class="fa fa-plus text-sm"></i>
                    </div>
                }
            </div>

            @if (IsAdmin())
            {
                <a href="/boards/settings/@_board.Id"><i class="fa fa-gear icon-button" title="Board settings"></i></a>
            }

            var filterIcon = "filter-icon";
            <span class="relative inline-block">
                <i id=@filterIcon class="fa fa-filter icon-button @( _filterModel.IsAnyFilterApplied() ? "text-primary hover:text-primary-hover" : string.Empty)" title="Filter cards" @onclick="() => _filterCardsModal?.Open(filterIcon)"></i>
                @if (_filterModel.IsAnyFilterApplied())
                {
                    <span class="absolute top-0 right-0 h-2 w-2 rounded-full border-2 border-white bg-primary hover:bg-primary-hover"></span>
                }
            </span>
            <i class="fa fa-chart-simple icon-button" @onclick="SwitchStatsDisplay" title="Toggle statistics"></i>
        }
    </header>
    <section class='flex w-screen flex-row divide-x divide-tab-outline'>
        <!-- Board section -->
        @if (_board is not null)
        {
            <section id="board-section" class="w-full flex-row gap-5 overflow-x-auto @(_preferences.ShowStats ? "hidden md:flex" : "flex") py-6">
                <SortableList Class="ml-12 flex flex-row gap-5" Items="_board.Columns.OrderBy(x => x.Index).ToList()" Context="column" OnUpdate="OnColumnMoved" Direction="horizontal" Handle=".drag-toggle" Pull=false Put=false>
                    <SortableItemTemplate>
                        @{
                            var columnCards = _cards.Where(x => x.ColumnId.Equals(column.Id)).ToList();
                            var cardsCount = columnCards.Count;
                        }
                        <div id="@column.Id" class="board-column gap-1">
                            <div class="flex w-full flex-row items-start justify-between">
                                <div class="flex flex-row items-center gap-2">
                                    <label class="align-middle">
                                        @column.Name
                                        <span class='text-2xs ml-1 rounded-full p-0.5 align-middle shadow-sm @(column.MaxCards != 0 && cardsCount >= column.MaxCards ? "bg-column-limit-reached" : "bg-card-bg")'>
                                            @if (column.MaxCards == 0)
                                            {
                                                <span>@cardsCount</span>
                                            }
                                            else
                                            {
                                                <span>@cardsCount/@column.MaxCards</span>
                                            }
                                        </span>
                                        @if (column.Collapsed)
                                        {
                                            <label class="ml-2 text-xs font-normal">(Collapsed)</label>
                                        }
                                    </label>
                                </div>

                                @if (IsAdmin())
                                {
                                    <div class="flex flex-row items-center gap-2">
                                        <i class="fa fa-up-down-left-right drag-toggle icon-button cursor-move text-icon" title="Drag to reorder column"></i>

                                        <Dropdown Actions='new() {
                                            { "Edit column", () => _editColumnModal?.Open(column.Id) },
                                            { "Delete column", async () => await OpenDeleteColumnDialog(column) },
                                            { $"{(column.Collapsed ? "Expand" : "Collapse")} column", async () => await ExpandOrCollapseColumn(column.Id) },
                                        }'>
                                            <i class="fa fa-ellipsis icon-button pr-1" title="Column options"></i>
                                        </Dropdown>
                                    </div>
                                }
                            </div>

                            @if(!column.Collapsed) 
                            {
                                <SortableList Id=@($"{COLUMN_PREFIX}{column.Id}") Animation=@(_board.DisableSortingAnimations ? 0 : 200) Class="min-h-[1rem] w-full overflow-y-auto" Group="group" Items="columnCards.OrderBy(x => x.Index).ToList()" Context="context" OnRemove="OnMovedFromColumn" OnUpdate="OnMovedWithinList">
                                    <SortableItemTemplate>
                                        @if(column.MaxCards == 1)
                                        {
                                            <div class="mt-1"></div>
                                        }
                                        <CardView Card="@context" Column="column" BoardCode="@_board.Code" EditCardModal="_editCardModal" DeleteCardModal="_deleteTaskModal" Members="_members" OnCardUpdated="HandleUpdate" Columns="_board.Columns"/>
                                    </SortableItemTemplate>
                                </SortableList>

                                @if(column.MaxCards == 0 || cardsCount < column.MaxCards) 
                                {
                                    <div data-active=@((_adding == column.Id).ToString()) @onclick="() => StartAddingToColumn(column.Id)" 
                                        class="add rounded-lg select-none p-5 h-min w-full to-task-card">
                                        @if(_adding != column.Id) {
                                            <i class="fa fa-plus text-3xl" title="Add new card"></i>
                                            <label>New card</label>
                                        } else {
                                            <div class="flex w-full flex-row items-center justify-between text-sm font-semibold">
                                                <label>Create new card</label>
                                                <i class="fa fa-xmark text-icon" @onclick="() => _adding = -1" @onclick:stopPropagation=true title="Cancel"></i>
                                            </div>

                                            <textarea class="h-16 w-full rounded-lg bg-card-bg p-2 text-start text-xs outline-1 outline-typing-outline" 
                                                           @bind="CreateTaskText"
                                                           @bind:event="oninput"
                                                           @ref=_textElement
                                                           @onkeydown='async (e) => {
                                                               if(!e.Key.Contains("Enter"))
                                                                    return;

                                                               await AttemptCreateTaskSubmit(column.Id);
                                                           }'
                                                           autofocus placeholder="Describe the task ..." wrap="soft"/>

                                            <hr class="border-t-tab-outline">
                                            <button class="w-full" @onclick="() => AttemptCreateTaskSubmit(column.Id)">Create</button>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </SortableItemTemplate>
                </SortableList>

                @if (IsAdmin())
                {
                    <div class="add mt-1 mr-12 h-[75vh] min-w-64 rounded-lg px-8" @onclick="() => _createColumnModal?.Open(_board.Id)" style="order: @(_board.Columns.Any() ? _board.Columns.Max(x => x.Id)+1 : 0);">
                        <i class="fa fa-plus text-3xl" title="Add new column"></i>
                        <label>New column</label>
                    </div>
                }
            </section>
            
            if(_preferences.ShowStats) 
            {
                <section class="flex w-screen flex-col items-center gap-6 px-2 py-6 md:w-80">
                    <div class="flex w-full flex-row items-center justify-between">
                        <h1>Progress</h1>
                        <i class="fa fa-xmark icon-button" @onclick=SwitchStatsDisplay title="Close statistics"></i>
                    </div>
                    <div class="flex w-full flex-col gap-8">
                        <!-- Side section -->
                        @if (_board is not null)
                        {
                            var completedCards = _board.Columns.Where(x => x.Finished).SelectMany(x => x.Cards).Where(x => !x.SnoozedUntil.HasValue).Count();
                            var totalCards = _board.Columns.SelectMany(x => x.Cards).Where(x => !x.SnoozedUntil.HasValue).Count();

                            <div class="flex flex-col gap-4">
                                <div class="flex flex-col gap-1">
                                    <div class="flex flex-row justify-between text-xs">
                                        <label>Tasks completed</label>
                                        <label class="text-gray-500">@completedCards/@totalCards</label>
                                    </div>
                                    <div class="grid h-1 w-full rounded-lg">
                                        <div class="z-10 w-24 rounded-lg bg-pink-500 transition-all" style="grid-row: 1; grid-column: 1; width: @(Math.Round((double) completedCards/totalCards*100))%;"></div>
                                        <div class="rounded-lg bg-pink-300" style="grid-row: 1; grid-column: 1;"></div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <Spinner />
                        }
                    </div>
                </section>
            }
        }
        else
        {
            <Spinner />
        }
    </section>
</div>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public int Id { get; set; } = default!;

    [Parameter]
    public int? CardId { get; set; }

    private const string COLUMN_PREFIX = "column_";
    private string FILTERS_SCOPED_KEY { get => $"{Constants.StorageKeys.FilterPreferencesPrefix}_{Id}"; }

    private Board? _board;
    private List<User> _members = [];
    private List<Card> _cards = [];
    private List<Label> _labels = [];

    private CreateColumnModal? _createColumnModal;
    private EditColumnModal? _editColumnModal;
    private EditCardModal? _editCardModal;
    private DeleteConfirmationDialog<Column>? _deleteColumnModal;
    private DeleteConfirmationDialog<Card>? _deleteTaskModal;
    private EditBoardMembershipsModal? _editBoardMembershipsModal;
    private FilterCardsModal? _filterCardsModal;
    private List<ElementReference> _avatars = [];
    private ElementReference Avatars { set => _avatars.Add(value); }
    private ElementReference? _textElement;

    private CreateCardModel _createTaskModel = new();
    private int _adding;
    private BoardPreferencesModel _preferences = new();
    private FilterCardsModel _filterModel = new();
    private int? _initialCardId;
    private DotNetObjectReference<BoardView>? objRef;

    protected override void OnParametersSet()
    {
        if (_board is null || !CardId.HasValue || _initialCardId == CardId)
            return;

        _initialCardId = CardId;
        _editCardModal?.Open(CardId.Value, _members, _board.Columns);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        objRef = DotNetObjectReference.Create(this);
        _initialCardId = CardId;

        try
        {
            var boardPreferences = await _protectedLocalStorage.GetAsync<BoardPreferencesModel>(Constants.StorageKeys.BoardPreferences);
            _preferences = (boardPreferences.Success ? boardPreferences.Value : new()) ?? new();
        }
        catch (CryptographicException)
        {
            _preferences = new();
        }

        try
        {
            var filterPreferences = await _protectedLocalStorage.GetAsync<FilterCardsModel>(FILTERS_SCOPED_KEY);
            _filterModel = (filterPreferences.Success ? filterPreferences.Value : new()) ?? new();
        }
        catch(CryptographicException)
        {
            _filterModel = new();
        }

        await HandleUpdate();

        if (_board is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var user = await db.Users
            .Include(x => x.LastVisits)
            .FirstOrDefaultAsync(x => x.Id.Equals(_user.Id));

        if (user is null)
            return;

        user.LastVisitedBoardId = _board.Id;

        var pastVisit = user.LastVisits.FirstOrDefault(x => x.BoardId.Equals(_board.Id));

        if (pastVisit is not null)
            user.LastVisits.Remove(pastVisit);

        user.LastVisits.Add(new LastVisit
        {
            UserId = _user.Id,
            BoardId = _board.Id,
            VisitTime = DateTime.Now
        });

        await db.SaveChangesAsync();

        if(CardId.HasValue)
            _editCardModal?.Open(CardId.Value, _members, _board.Columns);

        await MainLayout.UpdateRecentBoard();
    }

    private async Task SwitchStatsDisplay()
    {
        _preferences.ShowStats = !_preferences.ShowStats;

        try
        {
            await _protectedLocalStorage.SetAsync(Constants.StorageKeys.BoardPreferences, _preferences);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to save board preferences.");
        }

        StateHasChanged();
    }

    private int GetColumnIdFromString(string str)
        => Convert.ToInt32(str.Replace(COLUMN_PREFIX, string.Empty));

    private async Task OnMovedWithinList((string movedCardId, string? targetCardId, string columnId) args)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetColumn = db.Columns
            .Include(x => x.Cards)
            .FirstOrDefault(x => x.Id.Equals(GetColumnIdFromString(args.columnId)));

        if(targetColumn is null)
            return;

        var movedCard = targetColumn.Cards.OrderBy(x => x.Index).FirstOrDefault(x => x.Id.Equals(Convert.ToInt32(args.movedCardId)));

        if (movedCard is null)
            return;

        int targetIndex = targetColumn.Cards.Any() ? targetColumn.Cards.Max(x => x.Index) + 1 : 0;
        int? targetCardId = args.targetCardId is not null ? Convert.ToInt32(args.targetCardId) : null;

        if (targetCardId is not null)
        {
            var targetCard = targetColumn.Cards.FirstOrDefault(x => x.Id.Equals(targetCardId));

            if (targetCard is not null)
            {
                targetIndex = targetCard.Index;

                foreach (var card in targetColumn.Cards.OrderByDescending(x => x.Index))
                {
                    if (card.Index >= targetCard.Index)
                    {
                        card.Index++;
                    }
                }
            }
        }

        movedCard.Index = targetIndex;

        IndexHelper.FixIndices(targetColumn.Cards);

        await db.SaveChangesAsync();
        await HandleUpdate();
    }

    private async Task OnColumnMoved((string movedItemId, string? targetItemId, string _) args)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetBoard = db.Boards
            .Include(x => x.Columns)
            .FirstOrDefault(x => x.Id.Equals(Id));

        if(targetBoard is null)
            return;

        var movedColumn = targetBoard.Columns.FirstOrDefault(x => x.Id.Equals(Convert.ToInt32(args.movedItemId)));

        if(movedColumn is null)
            return;

        int targetIndex = targetBoard.Columns.Any() ? targetBoard.Columns.Max(x => x.Index) + 1 : 0;
        int? targetItemId = args.targetItemId is not null ? Convert.ToInt32(args.targetItemId) : null;

        if (targetItemId.HasValue)
        {
            var targetColumn = targetBoard.Columns.FirstOrDefault(x => x.Id.Equals(targetItemId));

            if (targetColumn is not null)
            {
                targetIndex = targetColumn.Index;

                foreach (var column in targetBoard.Columns.OrderByDescending(x => x.Index))
                {
                    if (column.Index >= targetColumn.Index)
                    {
                        column.Index++;
                    }
                }
            }
        }

        movedColumn.Index = targetIndex;

        IndexHelper.FixIndices(targetBoard.Columns);

        await db.SaveChangesAsync();
        await HandleUpdate();
    }

    private async Task OnMovedFromColumn((string movedCardId, string? targetCardId, string oldColumnId, string newColumnId, double x, double y) args)
    {
        var oldColumnId = GetColumnIdFromString(args.oldColumnId);
        var newColumnId = GetColumnIdFromString(args.newColumnId);

        using var db = _dbContextFactory.CreateDbContext();

        var targetColumns = await db.Columns
            .Where(x => x.Id.Equals(oldColumnId) || x.Id.Equals(newColumnId))
            .Include(x => x.Cards)
            .ToListAsync();

        var oldColumn = targetColumns.FirstOrDefault(x => x.Id.Equals(oldColumnId));
        var newColumn = targetColumns.FirstOrDefault(x => x.Id.Equals(newColumnId));

        if (oldColumn is null || newColumn is null)
            return;

        if(newColumn.MaxCards != 0 && newColumn.Cards.Count+1 > newColumn.MaxCards)
        {
            MainLayout.RunNotification(new("The card could not be moved to this column due to it being already full.", NotificationType.Fail));
            return;
        }

        var movedCard = oldColumn.Cards.OrderBy(x => x.Index).FirstOrDefault(x => x.Id.Equals(Convert.ToInt32(args.movedCardId)));

        if (movedCard is null)
            return;

        oldColumn.Cards.Remove(movedCard);

        IndexHelper.FixIndices(oldColumn.Cards);

        int targetIndex = newColumn.Cards.Any() ? newColumn.Cards.Max(x => x.Index) + 1 : 0;
        int? targetCardId = args.targetCardId is not null ? Convert.ToInt32(args.targetCardId) : null;

        if (targetCardId is not null)
        {
            var targetCard = newColumn.Cards.FirstOrDefault(x => x.Id.Equals(targetCardId));

            if (targetCard is not null)
            {
                targetIndex = targetCard.Index;

                foreach (var card in newColumn.Cards.OrderByDescending(x => x.Index))
                {
                    if (card.Index >= targetCard.Index)
                    {
                        card.Index++;
                    }
                }
            }
        }

        newColumn.Cards.Add(movedCard);
        movedCard.Index = targetIndex;
        movedCard.ColumnId = newColumnId;

        IndexHelper.FixIndices(newColumn.Cards);

        await db.SaveChangesAsync();
        await HandleUpdate();

        if(newColumn.Finished)
            await _js.InvokeVoidAsync("triggerConfetti", args.x, args.y);
    }

    protected void OnDataChanged()
    {
        StateHasChanged();
    }

    protected override async Task HandleUpdate()
    {
        await LoadBoardAsync();

        OnDataChanged();

        await _js.InvokeVoidAsync("scaleInitialize");
    }

    private async Task OnTaskCreated()
    {
        await RunNotification(typeof(Card), OperationType.Added);

        if(_board is not null && _user.AutomaticCardEdit)
            _editCardModal?.Open(_cards.OrderByDescending(x => x.CreatedAt).First().Id, _members, _board.Columns);
    }

    private async Task OnTaskEdited()
    {
        if(_board is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var columns = await db.Columns
            .Include(x => x.Cards)
            .Where(x => x.BoardId.Equals(_board.Id))
            .ToListAsync();

        foreach(var column in columns)
        {
            column.ReorderCards();
        }

        await db.SaveChangesAsync();

        await HandleUpdate();
    }

    private void StartAddingToColumn(int columnId)
    {
        _adding = columnId;

        StateHasChanged();

        _ = FocusCardCreation();
    }

    private async Task FocusCardCreation()
    {
        await Task.Delay(10);

        if (_textElement is null)
            return;

        await _textElement.Value.FocusAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ExpandOrCollapseColumn(int columnId)
    {
        ArgumentNullException.ThrowIfNull(_board);

        using var db = _dbContextFactory.CreateDbContext();

        var targetColumn = _board.Columns.First(x => x.Id.Equals(columnId));
        targetColumn.Collapsed = !targetColumn.Collapsed;
        await db.Columns.Where(x => x.Id.Equals(columnId)).ExecuteUpdateAsync(x => x.SetProperty(y => y.Collapsed, targetColumn.Collapsed));

        OnDataChanged();
    }

    private async Task LoadBoardAsync()
    {
        using var db = _dbContextFactory.CreateDbContext();

        var board = await db.Boards
            .Include(x => x.Columns)
            .Include(x => x.Labels)
            .Include(x => x.Project)
                .ThenInclude(x => x.Memberships)
                    .ThenInclude(x => x.User)
            .Include(x => x.Memberships)
                .ThenInclude(x => x.User)
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id.Equals(Id));

        if(board is null || !board.VerifyAccess(_user))
        {
            MainLayout.RunNotification(new("This board either does not exist or you do not have access.", NotificationType.Fail));
            _navigationManager.NavigateTo("/");
            return;
        }

        _members = [];

        if (board.Memberships.Any())
            _members.AddRange(board.Memberships.Select(x => x.User));

        if (board.Project.Memberships.Any())
            _members.AddRange(board.Project.Memberships.Select(x => x.User));

        _members = _members.DistinctBy(x => x.Id).ToList();
        _labels = board.Labels;
        _board = board;

        await LoadCardsAsync();

        StateHasChanged();
    }

    private async Task LoadCardsAsync()
    {
        ArgumentNullException.ThrowIfNull(_board);

        using var db = _dbContextFactory.CreateDbContext();
        var columnIds = _board.Columns.Select(x => x.Id).ToList();

        var queryableCards = db.Cards
            .AsNoTracking()
            .Include(x => x.CreatedBy)
            .Include(x => x.Assignees)
            .Include(x => x.Attachments)
            .Include(x => x.Subtasks)
            .Include(x => x.Labels)
            .Include(x => x.TimeRecords)
            .Where(x => columnIds.Contains(x.ColumnId))
            .Where(x => !x.SnoozedUntil.HasValue);


        if(!string.IsNullOrWhiteSpace(_filterModel.Text))
        {
            var query = _filterModel.Text.Trim();
            queryableCards = queryableCards.Where(x => x.Name.Contains(query) || (x.Column.Board.Code + "-" + x.Number).Contains(query) || (x.Description != null && x.Description.Contains(query)));
        }

        if (_filterModel.AssignedUserIds.Count > 0 || _filterModel.IncludeUnassigned)
            queryableCards = queryableCards.Where(card =>
                (_filterModel.AssignedUserIds.Count > 0 && card.Assignees.Any(a => _filterModel.AssignedUserIds.Contains(a.Id)))
                || (_filterModel.IncludeUnassigned && !card.Assignees.Any())
            );

        if (_filterModel.LabelIds.Count > 0)
            queryableCards = queryableCards.Where(card => card.Labels.Any(x => _filterModel.LabelIds.Contains(x.Id)));

        _cards = await queryableCards.ToListAsync();

        StateHasChanged();

        try
        {
            await _protectedLocalStorage.SetAsync(FILTERS_SCOPED_KEY, _filterModel);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to save filter preferences.");
        }
    }

    private async Task AttemptCreateTaskSubmit(int columnId)
    {
        if (_createTaskModel is null || string.IsNullOrWhiteSpace(_createTaskModel.Text))
            return;

        using var db = _dbContextFactory.CreateDbContext();
        var column = await db.Columns
            .Include(x => x.Cards)
            .FirstOrDefaultAsync(x => x.Id.Equals(columnId));

        if (column is not null)
        {
            var newCard = new Card
            {
                Name = _createTaskModel.Text,
                ColumnId = columnId,
                Index = IndexHelper.GetNextIndex(column.Cards),
                CreatedAt = DateTime.Now,
                Number = await _cardNumberingService.GetNextNumberAsync(Id),
                CreatedById = _user.Id
            };

            if(_user.AutomaticAssign)
            {
                var targetUser = await db.Users.FirstAsync(x => x.Id.Equals(_user.Id));
                newCard.Assignees.Add(targetUser);
            }

            column.Cards.Add(newCard);
            await db.SaveChangesAsync();
        }

        _createTaskModel = new();

        await OnTaskCreated();
    }

    private bool IsAdmin()
    {
        if(_board is null)
            return false;

        var boardMembership = _board.Memberships.FirstOrDefault(x => x.UserId.Equals(_user.Id));

        if(boardMembership is null)
        {
            var projectMembership = _board.Project.Memberships.FirstOrDefault(x => x.UserId.Equals(_user.Id));

            if(projectMembership is null)
                return false;

            return projectMembership.IsAdmin;
        }

        return boardMembership.IsAdmin;
    }

    private string CreateTaskText
    {
        get => _createTaskModel.Text ?? string.Empty;
        set => _createTaskModel.Text = value?.ReplaceLineEndings(" ") ?? string.Empty;
    }

    private async Task OpenDeleteColumnDialog(Column column)
    {
        ArgumentNullException.ThrowIfNull(_deleteColumnModal);

        await _deleteColumnModal.OpenDialog(column, async () =>
        {
            using var db = _dbContextFactory.CreateDbContext();

            var targetBoard = await db.Boards
                .Include(x => x.Columns)
            .FirstOrDefaultAsync(x => x.Id.Equals(column.BoardId));

            if (targetBoard is null)
                return;

            targetBoard.Columns.FixIndices();

            await db.SaveChangesAsync();
        });
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}

