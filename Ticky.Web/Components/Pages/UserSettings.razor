@page "/settings/{Tab:int?}"
@using System.Reflection
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject ILogger<UserSettings> _logger
@inject AvatarService _avatarService
@inject UserManager<User> _userManager
@inject ILogger<UserSettings> _logger
@inject NavigationManager _navigationManager
@inherits NotifiableBase
@implements IDisposable

<PageTitle>Settings - @Constants.APP_NAME</PageTitle>

<div class="w-full">
    <section class="flex w-full max-w-4xl grow flex-col gap-5 overflow-y-auto px-12 py-14">
        <header class="flex flex-row justify-between text-2xl font-bold">
            User settings
        </header>

        <section
            class="flex w-full flex-row flex-wrap items-center justify-start gap-1 rounded-lg border border-tab-outline px-1 py-1 text-sm">
            <div data-active='@(_tab == 1 ? "true" : "false")' class="settings-menu-item" @onclick="() => GoToTab(1)">General</div>
            <div data-active='@(_tab == 2 ? "true" : "false")' class="settings-menu-item" @onclick="() => GoToTab(2)">Avatar</div>
            <div data-active='@(_tab == 3 ? "true" : "false")' class="settings-menu-item" @onclick="() => GoToTab(3)">Credentials</div>
        </section>

        <section class="flex w-full flex-col divide-y divide-tab-outline">
            @if(_user is null)
            {
                <Spinner/>
            } else if (_tab == 1)
            {
                <div class="flex flex-col py-5">
                    <label class="font-bold">General settings</label>
                    <label class="text-sm opacity-70">All the most important settings for your profile, which do not belong to any other categories.</label>
                </div>
                <div class="settings-item">
                    <div class="flex flex-col text-sm">
                        <label class="font-bold opacity-90">Advanced card settings after creation</label>
                        <label class="w-4/5 max-w-2xl opacity-70">Changes, whether the large modal for setting up a card should open
                            after creating a card on the board.</label>
                    </div>

                    <input type="checkbox" class="switch" checked=@_user.AutomaticCardEdit @onchange="(e) => OnSettingChanged(e, x => x.AutomaticCardEdit)">
                </div>

                <div class="settings-item">
                    <div class="flex flex-col text-sm">
                        <label class="font-bold opacity-90">Delete without confirmation</label>
                        <label class="w-4/5 max-w-2xl opacity-70">This defines whether you should receive a confirmation pop-up whenever you
                            initiate a deletion of an object.</label>
                    </div>

                    <input type="checkbox" class="switch" checked=@_user.InstantDelete @onchange="(e) => OnSettingChanged(e, x => x.InstantDelete)">
                </div>

                <div class="settings-item">
                    <div class="flex flex-col text-sm">
                        <label class="font-bold opacity-90">Automatic reminder on deadline</label>
                        <label class="w-4/5 max-w-2xl opacity-70">
                            This option sets whether you will automatically be reminded about a card's deadline at the start of the day.
                        </label>
                    </div>

                    <input type="checkbox" class="switch" checked=@_user.AutomaticDeadlineReminder @onchange="(e) => OnSettingChanged(e, x => x.AutomaticDeadlineReminder)">
                </div>

                <div class="settings-item">
                    <div class="flex flex-col text-sm">
                        <label class="font-bold opacity-90">Automatically assign self</label>
                        <label class="w-4/5 max-w-2xl opacity-70">
                            This option sets whether you will automatically assign yourself to created cards.
                        </label>
                    </div>

                    <input type="checkbox" class="switch" checked=@_user.AutomaticAssign @onchange="(e) => OnSettingChanged(e, x => x.AutomaticAssign)">
                </div>
            } else if(_tab == 2)
            {
                <div class="flex flex-col py-5">
                    <label class="font-bold">Avatar</label>
                    <label class="text-sm opacity-70">Here you can change your profile picture.</label>
                </div>

                <div class="flex flex-col items-center justify-around gap-2 py-5 md:flex-row">
                    <div class="flex flex-col items-center">
                        <div class="h-60 w-60 bg-cover bg-center" 
                            style="background-image: url('@Constants.ACCESS_UPLOADED_IMAGES_PATH/@_user.ProfilePictureFileName?v=@DateTime.Now.Ticks');"/>
                        <label>Full image</label>
                    </div>

                    <div class="flex flex-col items-center">
                        <div 
                            class="h-32 w-32 rounded-full bg-cover bg-center" 
                            style="background-image: url('@Constants.ACCESS_UPLOADED_IMAGES_PATH/@_user.ProfilePictureFileName?v=@DateTime.Now.Ticks');"/>
                        <label>Rounded version</label>
                    </div>

                    <div class="flex flex-col items-center">
                        <div 
                            class="h-8 w-8 rounded-full bg-cover bg-center" 
                            style="background-image: url('@Constants.ACCESS_UPLOADED_IMAGES_PATH/@_user.ProfilePictureFileName?v=@DateTime.Now.Ticks');"/>
                        <label>Avatar version</label>
                    </div>
                </div>

                <div class="py-5">
                    @if(_isLoading)
                    {
                        <Spinner/>
                    }

                    <div class="flex flex-row justify-end gap-5">
                        <label class="label-as-button w-min cursor-pointer px-5 py-2" for="file-upload">Upload</label>
                        <InputFile class="hidden" id="file-upload" OnChange="OnFileChanged"/>
                        <button class="bg-cancel-button px-5 py-2 hover:bg-cancel-button-hover" @onclick="RestoreToOriginal">Reset</button>
                    </div>
                </div>
            } else if(_tab == 3)
            {
                <NavigationLock ConfirmExternalNavigation=true OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>

                <div class="flex flex-col py-5">
                    <label class="font-bold">Credentials</label>
                    @if(_user.NeedsNewCredentials)
                    {
                        <label class="text-sm text-orange-500 opacity-70">This account is either using default credentials or they have been set up by the administrator, therefore they must be changed before going any further.</label>
                    } else {
                        <label class="text-sm opacity-70">Here you can change your credentials.</label>
                    }
                </div>

                <EditForm class="form py-5" EditContext="_credentialsContext" OnValidSubmit="OnCredentialsValidSubmit">
                    
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <Name For="() => _credentialsModel.OldEmailAddress" />
                        <InputText class="form-control" @bind-Value="_credentialsModel.OldEmailAddress" disabled/>
                        <ValidationMessage For="() => _credentialsModel.OldEmailAddress" />
                    </div>

                    <div class="form-group">
                        <Name For="() => _credentialsModel.NewEmailAddress" />
                        <InputText class="form-control" @bind-Value="_credentialsModel.NewEmailAddress" autofocus/>
                        <ValidationMessage For="() => _credentialsModel.NewEmailAddress" />
                    </div>

                    @if(!_user.NeedsNewCredentials)
                    {
                        <div class="form-group">
                            <Name For="() => _credentialsModel.OldPassword" />
                            <InputText type="password" autocomplete="current-password" autocapitalize="off" spellcheck="false" class="form-control" @bind-Value="_credentialsModel.OldPassword"/>
                            <ValidationMessage For="() => _credentialsModel.OldPassword" />
                        </div>
                    }

                    <div class="form-group">
                        <Name For="() => _credentialsModel.NewPassword" />
                        <InputText type="password" autocomplete="new-password" autocapitalize="off" spellcheck="false" class="form-control" @bind-Value="_credentialsModel.NewPassword"/>
                        <ValidationMessage For="() => _credentialsModel.NewPassword" />
                    </div>

                    <div class="form-group">
                        <Name For="() => _credentialsModel.RepeatPassword" />
                        <InputText type="password" autocomplete="new-password" autocapitalize="off" spellcheck="false" class="form-control" @bind-Value="_credentialsModel.RepeatPassword"/>
                        <ValidationMessage For="() => _credentialsModel.RepeatPassword" />
                    </div>

                    <button class="auth-button" type="submit">Save</button>
                </EditForm>
            }
        </section>
    </section>
</div>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User? _user { get; set; }

    [Parameter]
    public int? Tab { get; set; }

    private int _tab = 1;

    private IBrowserFile? _uploadedFile;

    private bool _isLoading;
    private CredentialsModel _credentialsModel = new();
    private EditContext? _credentialsContext;
    private ValidationMessageStore? _credentialsMessageStore;

    protected override void OnParametersSet()
    {
        _credentialsContext = new EditContext(_credentialsModel);

        if(!Tab.HasValue)
            return;

        GoToTab(Tab.Value);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(!firstRender)
            return;

        ArgumentNullException.ThrowIfNull(_user);

        _credentialsModel = new()
        {
            OldEmailAddress = _user.Email!,
            NewEmailAddress = _user.NeedsNewCredentials ? string.Empty : _user.Email!
        };
        _credentialsContext = new EditContext(_credentialsModel);
        _credentialsContext.OnValidationRequested += HandleValidationRequested;
        _credentialsMessageStore = new(_credentialsContext);
        StateHasChanged();
    }

    private void GoToTab(int tabNumber) 
    {
        ArgumentNullException.ThrowIfNull(_user);

        if (tabNumber == _tab)
            return;

        if (_user.NeedsNewCredentials && tabNumber != 3) 
        {
            OnAttemptedLeaveWhenDisallowed();
            return;
        }

        _tab = Math.Clamp(tabNumber, 1, 3);
    }

    private async void OnSettingChanged(ChangeEventArgs e, Expression<Func<User, bool>> setter)
    {
        ArgumentNullException.ThrowIfNull(_user);

        if (e.Value is not bool val)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var user = await db.Users.FirstOrDefaultAsync(x => x.Id.Equals(_user.Id));

        if (user is null)
            return;

        if (setter.Body is MemberExpression memberExpression && memberExpression.Member is PropertyInfo propertyInfo && propertyInfo.PropertyType == typeof(bool))
            propertyInfo.SetValue(user, val);
        else throw new Exception("Invalid property provided.");

        await db.SaveChangesAsync();

        await RunNotification(typeof(UserSettings), OperationType.Edited);
    }

    private void ShowUploadError(string message)
    {
        _isLoading = false;
        MainLayout.RunNotification(new Notification($"File upload failed: {message}", NotificationType.Fail));
        StateHasChanged();
    }

    public async Task RestoreToOriginal() 
    {
        ArgumentNullException.ThrowIfNull(_user);

        var avatarPath = await _avatarService.FetchAvatarAsync(_user.DisplayName);

        using var db = _dbContextFactory.CreateDbContext();
        var user = await db.Users.FirstOrDefaultAsync(x => x.Id.Equals(_user.Id));

        if (user is null)
            return;

        user.ProfilePictureFileName = avatarPath;
        await db.SaveChangesAsync();
        _user = user;

        StateHasChanged();

        MainLayout.RunNotification(new Notification("Profile picture was reset to the default one."));
    }

    public async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        ArgumentNullException.ThrowIfNull(_user);
        _isLoading = true;

        if (!e.File.ContentType.Contains("image"))
        {
            ShowUploadError("The file must be an image.");
            return;
        }

        if (e.File.Size > Constants.Limits.MAX_IMAGE_SIZE)
        {
            ShowUploadError("The file is too large.");
            return;
        }

        try
        {
            _uploadedFile = e.File;
            var folderPath = Constants.SAVE_UPLOADED_IMAGES_PATH;

            if (!Directory.Exists(folderPath))
                Directory.CreateDirectory(folderPath);

            var extension = _uploadedFile.Name[(_uploadedFile.Name.LastIndexOf('.') + 1)..];

            string path;
            string trustedFileName;
            do
            {
                trustedFileName = Path.GetRandomFileName();
                trustedFileName = trustedFileName[..trustedFileName.LastIndexOf('.')] + $".{extension}";

                path = Path.Combine(folderPath, trustedFileName);
            } while (File.Exists(path));

            await using FileStream fs = new(path, FileMode.Create);
            await e.File.OpenReadStream(Constants.Limits.MAX_IMAGE_SIZE).CopyToAsync(fs);

            using var db = _dbContextFactory.CreateDbContext();
            var user = await db.Users.FirstOrDefaultAsync(x => x.Id.Equals(_user.Id));

            if(user is null)
            {
                ShowUploadError("An error occured. Try again later.");
                return;
            }

            user.ProfilePictureFileName = trustedFileName;
            _user.ProfilePictureFileName = user.ProfilePictureFileName;

            await db.SaveChangesAsync();

            MainLayout.RunNotification(new Notification("Profile picture was changed."));
            _isLoading = false;
        }
        catch (Exception ex)
        {
            _logger.LogError($"File upload failed, file name {e.File.Name}, error: {ex}");
            ShowUploadError("An error occured. Try again later.");
        }

        StateHasChanged();
    }

    private void OnBeforeInternalNavigation(LocationChangingContext context)
    {
        ArgumentNullException.ThrowIfNull(_user);

        if(!_user.NeedsNewCredentials)
            return;

        context.PreventNavigation();
        OnAttemptedLeaveWhenDisallowed();
    }

    private void OnAttemptedLeaveWhenDisallowed()
    {
        MainLayout.RunNotification(new("You can't leave this page until you have changed your credentials.", NotificationType.Fail));
    }

    private async void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        ArgumentNullException.ThrowIfNull(_user);

        _credentialsMessageStore?.Clear();

        if (!_user.NeedsNewCredentials)
        {
            if(!(await _userManager.CheckPasswordAsync(_user, _credentialsModel.OldPassword)))
                _credentialsMessageStore?.Add(() => _credentialsModel.OldPassword, "The old password you provided is incorrect. If you don't remember it, please reach out to an administrator to get it reset.");
        } else
        {
            if(string.IsNullOrWhiteSpace(_credentialsModel.NewPassword))
                _credentialsMessageStore?.Add(() => _credentialsModel.NewPassword, "A new password must be provided.");

        }
    }

    private async Task OnCredentialsValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(_user);

        var targetUser = await _userManager.FindByIdAsync(_user.Id.ToString());

        ArgumentNullException.ThrowIfNull(targetUser);

        if (!_credentialsModel.NewEmailAddress.Equals(_user.Email))
        {
            try
            {
                var result = await _userManager.SetUserNameAsync(targetUser, _credentialsModel.NewEmailAddress);

                if (!result.Succeeded)
                {
                    foreach (var error in result.Errors)
                        _credentialsMessageStore?.Add(() => _credentialsModel.NewEmailAddress, error.Description);

                    _credentialsContext?.NotifyValidationStateChanged();
                    return;
                }

                result = await _userManager.ChangeEmailAsync(targetUser, _credentialsModel.NewEmailAddress, await _userManager.GenerateChangeEmailTokenAsync(targetUser, _credentialsModel.NewEmailAddress));

                if (!result.Succeeded)
                {
                    foreach (var error in result.Errors)
                        _credentialsMessageStore?.Add(() => _credentialsModel.NewEmailAddress, error.Description);

                    _credentialsContext?.NotifyValidationStateChanged();
                    return;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to change e-mail.");
            }
        }

        if (!string.IsNullOrWhiteSpace(_credentialsModel.NewPassword))
        {
            try
            {
                var result = await _userManager.ResetPasswordAsync(targetUser, await _userManager.GeneratePasswordResetTokenAsync(targetUser), _credentialsModel.NewPassword);

                if (!result.Succeeded)
                {
                    foreach (var error in result.Errors)
                        _credentialsMessageStore?.Add(() => _credentialsModel.NewPassword, error.Description);

                    _credentialsContext?.NotifyValidationStateChanged();
                    return;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to change password.");
            }

        }

        using var db = _dbContextFactory.CreateDbContext();

        await db.Users.Where(x => x.Id.Equals(targetUser.Id)).ExecuteUpdateAsync(x => x.SetProperty(y => y.NeedsNewCredentials, false));

        targetUser.NeedsNewCredentials = false;
        bool neededNewCredentials = _user.NeedsNewCredentials;
        _user = targetUser;

        if (neededNewCredentials) 
        {
            MainLayout.RunNotification(new("Your credentials have been successfully set."));
            _navigationManager.NavigateTo("/");
        }
        else
            MainLayout.RunNotification(new("User updated successfully."));
    }


    public void Dispose()
    {
        if (_credentialsContext is not null)
        {
            _credentialsContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
