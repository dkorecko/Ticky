@implements IDisposable
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject IJSRuntime _js
@inject NavigationManager _navigationManager
@inject SearchService _searchService

<nav id="nav-menu" class="z-10 flex w-full items-center justify-center bg-card-bg px-10 py-2">
    <!-- Desktop version -->
    <div class="hidden w-full flex-row justify-center self-center lg:flex">
        <div class="mr-auto flex flex-row items-center gap-5">
            <NavLink href="/">
                <img height="32" width="32" src='@Assets["/images/ticky.png"]' alt="Ticky app logo"/>
            </NavLink>
            <input @ref="_triggerElement" class="w-80 rounded-2xl bg-search-bar p-2 text-center text-xs" type="search"
                   placeholder="Search for tasks ..." @oninput="UpdateSearchTerm"
                   @onclick='OpenSearchResults' @onclick:stopPropagation=true/>
        </div>
        <div @ref="_dropdownElement" class="dropdown absolute top-0 left-0 z-10 hidden min-w-80 bg-modal shadow">
            @if(_isLoading)
            {
                <Spinner Class="py-2"/>
            } else if (_resultCards.Count == 0) 
            {
                <div class="px-3 py-2 text-xs">
                    No results have been found.
                </div>
            } else {
                foreach(var result in _resultCards) {
                    <div class="flex cursor-pointer flex-col justify-between px-3 py-2 text-xs hover:bg-dropdown-option" @onclick='() => GoToCard(result.Column.BoardId, result.Id)'>
                        <div class="flex flex-row justify-between gap-3">
                            <label class="cursor-pointer whitespace-nowrap">@result.Column.Board.Code-@result.Number</label>
                            <label class="cursor-pointer truncate whitespace-nowrap">@result.Name</label>
                        </div>
                        <label class="text-2xs cursor-pointer font-light">Project @result.Column.Board.Project.Name â€” @result.Column.Board.Name</label>
                    </div>
                }
            }
        </div>
        <div class="mr-auto grid">
            <div class="nav-links" style="grid-column: 1; grid-row: 1;">
                <NavLink class="nav-link" Match="NavLinkMatch.All" href="/">
                    Home
                </NavLink>
                @if (_user?.LastVisitedBoardId is not null)
                {
                    <NavLink class="nav-link" href=@($"{Constants.Mappings.BOARD_PATH}/{_user?.LastVisitedBoardId}")>
                        Recent board
                    </NavLink>
                }
                <AuthorizeView Policy="@Constants.Policies.RequireAdmin">
                    <NavLink class="nav-link" href="/admin">
                        Admin Panel
                    </NavLink>
                </AuthorizeView>
                <NavLink class="nav-link" href="@Constants.Mappings.LOGOUT_PATH">
                    Log out
                </NavLink>
            </div>
            <div class="flex w-100 flex-col justify-end" style="grid-column: 1; grid-row: 1;">
                <div id="nav-button-underline" class="h-0.5 w-0 bg-primary transition-all ease-in-out"></div>
            </div>
        </div>
        <div class="ml-auto flex flex-row items-center gap-5">
            <span class="fa fa-circle-half-stroke cursor-pointer text-2xl text-nav-link transition-all hover:text-nav-link-hover" onclick="switchTheme()" title="Switch theme"></span>
            <NavLink href="/settings">
                <div class="avatar avatar-border" style="background-image: url('@Constants.ACCESS_UPLOADED_IMAGES_PATH/@_user?.ProfilePictureFileName');"></div>
            </NavLink>
        </div>
    </div>

    <!-- Mobile version -->
    <div class="flex w-full flex-row items-center justify-between text-nav-link lg:hidden">
        <SearchModal @ref="_searchModal"/>

        <NavLink href="/">
            <img height="32" width="32" src='@Assets["/images/ticky.png"]' alt="Ticky app logo" />
        </NavLink>
        @if (_user?.LastVisitedBoardId is not null)
        {
            <NavLink class="nav-link" Match="NavLinkMatch.All" href=@($"{Constants.Mappings.BOARD_PATH}/{_user?.LastVisitedBoardId}")>
                <span class="fa fa-briefcase" title="Recent board"></span>
            </NavLink>
        }
        <div class="nav-link" @onclick="() => _searchModal?.Open()">
            <span class="fa fa-magnifying-glass" title="Search"></span>
        </div>
        <AuthorizeView Policy="@Constants.Policies.RequireAdmin">
            <NavLink class="nav-link" href="/admin">
                <span class="fa fa-users" title="Admin panel"></span>
            </NavLink>
        </AuthorizeView>

        <Dropdown Actions='new() {
            { "User settings", () => _navigationManager.NavigateTo("/settings") },
            { "Switch theme", () => _js.InvokeVoidAsync("switchTheme") },
            { "Log out", () => _navigationManager.NavigateTo(Constants.Mappings.LOGOUT_PATH, true) },
        }'>
            <div class="avatar avatar-border" style="background-image: url('@Constants.ACCESS_UPLOADED_IMAGES_PATH/@_user?.ProfilePictureFileName');"></div>
        </Dropdown>
    </div>
</nav>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    private Timer? _timer;
    private string? _searchTerm;
    private bool _isLoading;

    private List<Card> _resultCards = [];

    private ElementReference? _triggerElement;
    private ElementReference? _dropdownElement;
    private SearchModal? _searchModal;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        StateHasChanged();

        _timer = new Timer(2000);
        _timer.Stop();
        _timer.Elapsed += Filter;
        _timer.AutoReset = false;
    }

    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        _searchTerm = e.Value as string;

        _timer?.Stop();
        _timer?.Start();

        _isLoading = true;
        StateHasChanged();
    }

    private async Task GoToCard(int boardId, int cardId)
    {
        _navigationManager.NavigateTo($"{Constants.Mappings.BOARD_PATH}/{boardId}/{cardId}");
        await _js.InvokeVoidAsync("closeDropdowns");
    }

    private async Task OpenSearchResults()
    {
        await _js.InvokeVoidAsync("openDropDownOnElementPosition", _dropdownElement, _triggerElement);
    }

    private async void Filter(Object? obj = null, ElapsedEventArgs? e = null)
    {
        _resultCards = await _searchService.SearchAsync(_searchTerm, _user);
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
        => _timer?.Dispose();
}