@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Edit column" OnSubmitAttempted="OnSubmitAttempted">
    @if (_column is not null)
    {
        <EditForm class="form" EditContext="  _editContext">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <Name For=" () => _column.Name" />
                <InputText class="form-control" @bind-Value="_column.Name" @ref="FocusElement" />
                <ValidationMessage For="() => _column.Name" />
            </div>

            <div class="form-group">
                <Name For="() => _column.MaxCards" />
                <InputNumber class="form-control" @bind-Value="_column.MaxCards" />
                <ValidationMessage For="() => _column.MaxCards" />
            </div>

            <div class="form-group">
                <Name For="() => _column.Finished" />
                <InputCheckbox class="switch" @bind-Value="_column.Finished" />
                <ValidationMessage For="() => _column.Finished" />
            </div>

            <div class="form-group">
                <Name For="() => _column.OrderRule" />
                <InputSelect class="form-control" @bind-Value="_column.OrderRule">
                    @foreach (Enum enumValue in Enum.GetValues(typeof(OrderRule)))
                    {
                        if (_column.OrderRule.Equals(enumValue))
                        {
                            <option selected value="@enumValue">@enumValue.GetDisplayName()</option>
                        }
                        else
                        {
                            <option value="@enumValue">@enumValue.GetDisplayName()</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => _column.OrderRule" />
            </div>
        </EditForm>
    }
</Modal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private Column? _column;

    private EditContext? _editContext;

    public async Task Open(int columnId)
    {
        using var db = _dbContextFactory.CreateDbContext();
        _column = await db.Columns
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id.Equals(columnId));

        if (_column is null)
            return;

        _editContext = new EditContext(_column);

        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if (Modal is null || _editContext is null || _column is null)
            return;

        if (!_editContext.Validate())
            return;

        using var db = _dbContextFactory.CreateDbContext();
        var targetColumn = await db.Columns
            .Include(x => x.Cards)
            .FirstOrDefaultAsync(x => x.Id.Equals(_column.Id));

        if (targetColumn is not null)
        {
            targetColumn.Name = _column.Name;
            targetColumn.Finished = _column.Finished;
            targetColumn.MaxCards = _column.MaxCards;
            targetColumn.OrderRule = _column.OrderRule;

            targetColumn.ReorderCards();

            await db.SaveChangesAsync();
        }

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }
}