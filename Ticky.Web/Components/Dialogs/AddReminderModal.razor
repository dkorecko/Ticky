@using Ticky.Base.Entities
@inject IDbContextFactory<DataContext> _dbContextFactory

<ActionModal @ref=_modalRef Title="Add reminder">
    @if(_card is null) {
        <Spinner/>
    } else {
        <EditForm class="form p-2" Model="_reminderModel" OnValidSubmit="AddReminder">
            <DataAnnotationsValidator />

            <div class="form-group">
                <Name For="() => _reminderModel.At" />
                <InputDate class="form-control" @bind-Value="_reminderModel.At" min="@DateTime.Today.ToHtmlDateString()" />
                <ValidationMessage For="() => _reminderModel.At" />
            </div>
            <div class="form-group">
                <Name For="() => _reminderModel.Time" />
                <InputSelect class="form-control" @bind-Value="_reminderModel.Time">
                    @{
                        var baseTime = DateTime.Today;
                    }

                    @while(baseTime.Day.Equals(DateTime.Today.Day))
                    {
                        var stepTime = baseTime;
                        <option value="@stepTime.ToString("HH:mm")">@stepTime.ToString("HH:mm")</option>

                        baseTime = baseTime.AddMinutes(15);
                    }
                </InputSelect>
                <ValidationMessage For="() => _reminderModel.Time" />
            </div>

            <button type="submit">Add</button>
        </EditForm>
    }
</ActionModal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback UpdateCard { get; set; }

    private ActionModal? _modalRef;

    private Card? _card;

    private ReminderModel _reminderModel = new();

    public void Open(ElementReference? triggerElement, Card card) {
        _card = card;
        _reminderModel = new();
        _modalRef?.Open(triggerElement);
        StateHasChanged();
    }

    public async Task AddReminder() 
    {
        if(_card is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();
        var card = await db.Cards
            .Include(x => x.Reminders)
            .Include(x => x.Activities)
            .FirstOrDefaultAsync(x => x.Id.Equals(_card.Id));

        if(card is null)
            return;

        var time = DateTime.ParseExact(_reminderModel.Time, "HH:mm", null);

        var newReminder = new Reminder
            {
                CardId = card.Id,
                At = new DateTime(_reminderModel.At.Year, _reminderModel.At.Month, _reminderModel.At.Day, time.Hour, time.Minute, 0)
            };

        card.Reminders.Add(newReminder);
        card.Activities.Add(new Activity
            {
                Text = $"<b>added</b> a reminder for <b>{newReminder.At.ToReadableStringWithTime()}</b>",
                UserId = _user.Id,
                CardId = card.Id,
                At = DateTime.Now
            });

        await db.SaveChangesAsync();

        _card = card;
        StateHasChanged();
        await UpdateCard.InvokeAsync();
        _modalRef?.Close();
    }
}