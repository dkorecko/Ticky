@inject IDbContextFactory<DataContext> _dbContextFactory
@inject IJSRuntime _js

<ActionModal @ref=_modalRef Title="Link card">
    @if(_card is null) 
    {
        <Spinner/>
    } else {
        <EditForm class="form p-2" EditContext="_editContext" OnSubmit="OnSubmitAttempted">
            <DataAnnotationsValidator />

            <div class="form-group">
                <Name For="() => _linkCardsModel.Text" />
                <InputSelect class="form-control" @bind-Value="_linkCardsModel.Text">
                    @foreach(var item in Constants.LINK_TYPE_PAIRS.Keys)
                    {
                        <option value="@item">@item</option>
                    }
                    @foreach (var item in Constants.LINK_TYPE_PAIRS.Values)
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _linkCardsModel.Text" />
                @if (_cardError is not null)
                {
                    <div class="validation-message">@_cardError</div>
                }
            </div>

            <button type="submit">Link</button>
        </EditForm>
    }
</ActionModal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback UpdateCard {get; set;}

    private ActionModal? _modalRef;

    private Card? _card;
    private Card? _linkingCard;

    private LinkCardsModel _linkCardsModel = new();

    private string? _cardError;

    private EditContext _editContext = new(new LinkCardsModel());

    public void Open(string elementId, Card card, Card linkingCard) 
    {
        _card = card;
        _linkingCard = linkingCard;
        _cardError = null;
        _linkCardsModel = new();
        _editContext = new EditContext(_linkCardsModel);
        StateHasChanged();
        _modalRef?.Open(elementId);
    }

    public async Task OnSubmitAttempted() 
    {
        if(_card is null || _linkingCard is null)
            return;

        _cardError = null;

        if (!_editContext.Validate())
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var card = await db.Cards
            .Include(x => x.LinkedIssuesOne)
            .Include(x => x.LinkedIssuesTwo)
            .Include(x => x.Activities)
            .Include(x => x.Column)
                .ThenInclude(x => x.Board)
            .FirstOrDefaultAsync(x => x.Id.Equals(_card.Id));

        if(card is null)
            return;

        var targetCard = await db.Cards
            .Include(x => x.LinkedIssuesOne)
            .Include(x => x.LinkedIssuesTwo)
            .Include(x => x.Activities)
            .Include(x => x.Column)
                .ThenInclude(x => x.Board)
            .FirstOrDefaultAsync(x => x.Id == _linkingCard.Id);

        if (targetCard is null) 
        {
            _cardError = "Target card does not exist anymore.";
            return;
        }

        if(targetCard.Id.Equals(card.Id))
        {
            _cardError = "You cannot link this card to itself.";
            return;
        }

        if(card.LinkedIssuesOne.Any(x => x.CardTwoId.Equals(targetCard.Id)))
        {
            _cardError = "This card is already linked to the target card.";
            return;
        }

        card.LinkedIssuesOne.Add(new CardLink
        {
            CardOneId = card.Id,
            CardTwoId = targetCard.Id,
            Category = _linkCardsModel.Text
        });

        var oppositeCategory = Constants.LINK_TYPE_PAIRS.ContainsKey(_linkCardsModel.Text) ? Constants.LINK_TYPE_PAIRS[_linkCardsModel.Text] : Constants.LINK_TYPE_PAIRS.First(x => x.Value.Equals(_linkCardsModel.Text)).Key;

        targetCard.LinkedIssuesOne.Add(new CardLink
            {
                CardOneId = targetCard.Id,
                CardTwoId = card.Id,
                Category = oppositeCategory
            });

        card.Activities.Add(new Activity
            {
                Text = $"<b>added</b> a linked issue <b>{targetCard.Column.Board.Code}-{targetCard.Number}</b> with <b>{_linkCardsModel.Text}</b> relationship",
                UserId = _user.Id,
                CardId = card.Id,
            });
        targetCard.Activities.Add(new Activity
            {
                Text = $"<b>added</b> a linked issue <b>{card.Column.Board.Code}-{card.Number}</b> with <b>{oppositeCategory}</b> relationship",
                UserId = _user.Id,
                CardId = card.Id,
            });

        await db.SaveChangesAsync();

        _card = card;
        StateHasChanged();
        await UpdateCard.InvokeAsync();
        _modalRef?.Close();
    }
}