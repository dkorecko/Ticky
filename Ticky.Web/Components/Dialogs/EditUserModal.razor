@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject UserManager<User> _userManager

<Modal @ref=Modal Title="Edit user" OnSubmitAttempted="EditUser">
    <EditForm class="form p-2" EditContext="_editContext">
        <DataAnnotationsValidator />

        <div class="form-group">
            <Name For="() => _userModel.DisplayName" />
            <InputText class="form-control" @bind-Value="_userModel.DisplayName" @ref=FocusElement />
            <ValidationMessage For="() => _userModel.DisplayName" />
        </div>

        <div class="form-group">
            <Name For="() => _userModel.Email" />
            <InputText class="form-control" @bind-Value="_userModel.Email" />
            <ValidationMessage For="() => _userModel.Email" />
        </div>

        <div class="form-group">
            <Name For="() => _userModel.Password" />
            <InputText class="form-control" @bind-Value="_userModel.Password" />
            <ValidationMessage For="() => _userModel.Password" />
        </div>

        <div class="form-group">
            <Name For="() => _userModel.ConfirmPassword" />
            <InputText class="form-control" @bind-Value="_userModel.ConfirmPassword" />
            <ValidationMessage For="() => _userModel.ConfirmPassword" />
        </div>
    </EditForm>
</Modal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private User? _targetUser;
    private UserModel _userModel = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _validationMessageStore;

    public async void Open(int userId) 
    {
        using var db = _dbContextFactory.CreateDbContext();

        _targetUser = await db.Users.FirstOrDefaultAsync(x => x.Id.Equals(userId));

        ArgumentNullException.ThrowIfNull(_targetUser);

        _userModel = new() 
        {
            DisplayName = _targetUser.DisplayName,
            Email = _targetUser.Email!
        };

        _editContext = new EditContext(_userModel);
        _editContext.OnValidationRequested += (sender, args) =>
        {
            _validationMessageStore?.Clear();
        };
        _validationMessageStore = new(_editContext);

        base.Open();
    }

    public async Task EditUser() 
    {
        if(_targetUser is null || _editContext is null || !_editContext.Validate())
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var targetUser = await _userManager.FindByIdAsync(_targetUser.Id.ToString());

        ArgumentNullException.ThrowIfNull(targetUser);

        var result = await _userManager.ResetPasswordAsync(targetUser, await _userManager.GeneratePasswordResetTokenAsync(targetUser), _userModel.Password);

        if(!result.Succeeded)
        {
            foreach (var error in result.Errors)
                _validationMessageStore?.Add(() => _userModel.Email, error.Description);

            _editContext?.NotifyValidationStateChanged();
            return;
        }

        targetUser.NeedsNewCredentials = true;
        targetUser.Email = _userModel.Email;
        targetUser.DisplayName = _userModel.DisplayName;

        await _userManager.UpdateAsync(targetUser);

        StateHasChanged();
        await OnSubmit.InvokeAsync();
        Modal?.Close();
    }
}