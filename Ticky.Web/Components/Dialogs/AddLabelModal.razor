@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref=Modal Title="Add label" OnSubmitAttempted="AddLabel">
    @if(_board is null) {
        <Spinner/>
    } else {
        <EditForm class="form p-2" EditContext="_editContext">
            <DataAnnotationsValidator />

            <div class="form-group">
                <Name For="() => _labelModel.Text" />
                <input type="text" class="form-control" value="@_labelModel.Text" @oninput="OnTextUpdated" @ref="FocusElement" />
                <ValidationMessage For="() => _labelModel.Text" />
            </div>

            <div class="form-group">
                <Name For="() => _labelModel.TextColor" />
                <input type="color" value="@(_labelModel.TextColor.HasValue ? ColorTranslator.ToHtml(_labelModel.TextColor.Value) : string.Empty)" @onchange="OnTextColorUpdated" />
                <ValidationMessage For="() => _labelModel.TextColor" />
            </div>

            <div class="form-group">
                <Name For="() => _labelModel.BackgroundColor" />
                <input type="color" value="@(_labelModel.BackgroundColor.HasValue ? ColorTranslator.ToHtml(_labelModel.BackgroundColor.Value) : string.Empty)" @onchange="OnBackgroundColorUpdated" />
                <ValidationMessage For="() => _labelModel.BackgroundColor" />
            </div>

            <div class="form-group">
                <label>Preview:</label>
                <LabelView Label="_showcaseLabel"/>
            </div>
        </EditForm>
    }
</Modal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private Board? _board;
    private LabelModel _labelModel = new();
    private Label? _showcaseLabel;
    private EditContext? _editContext;

    public void Open(Board board) {
        _board = board;
        _labelModel = new();
        _showcaseLabel = new()
            {
                BoardId = board.Id,
                Name = "Example",
                BackgroundColor = Color.AliceBlue,
                TextColor = Color.Black
            };
        _editContext = new EditContext(_labelModel);

        base.Open();
    }

    private void OnTextUpdated(ChangeEventArgs e)
    {
        if (e.Value is not string str || _showcaseLabel is null)
            return;

        if(string.IsNullOrWhiteSpace(str))
        {
            _showcaseLabel.Name = "Example";
            return;
        }

        _showcaseLabel.Name = str;
        _labelModel.Text = str;
    }

    private void OnTextColorUpdated(ChangeEventArgs e)
    {
        if (e.Value is not string str || _showcaseLabel is null)
            return;

        _showcaseLabel.TextColor = ColorTranslator.FromHtml(str);
        _labelModel.TextColor = _showcaseLabel.TextColor;
    }

    private void OnBackgroundColorUpdated(ChangeEventArgs e)
    {
        if (e.Value is not string str || _showcaseLabel is null)
            return;

        _showcaseLabel.BackgroundColor = ColorTranslator.FromHtml(str);
        _labelModel.BackgroundColor = _showcaseLabel.BackgroundColor;
    }

    public async Task AddLabel() 
    {
        if(_board is null || _editContext is null || !_editContext.Validate())
            return;

        using var db = _dbContextFactory.CreateDbContext();
        var board = await db.Boards
            .Include(x => x.Labels)
            .FirstOrDefaultAsync(x => x.Id.Equals(_board.Id));

        if(board is null)
            return;

        board.Labels.Add(new Label
        {
            BoardId = board.Id,
            Name = _labelModel.Text,
            TextColor = _labelModel.TextColor!.Value,
            BackgroundColor = _labelModel.BackgroundColor!.Value
        });

        await db.SaveChangesAsync();

        _board = board;
        StateHasChanged();
        await OnSubmit.InvokeAsync();
        Modal?.Close();
    }
}