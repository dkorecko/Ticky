@inject IDbContextFactory<DataContext> _dbContextFactory

<ActionModal @ref=_modalRef Title="Assignees">
    @if(_assignable is null) 
    {
        <Spinner/>
    } else {
        <div class="flex w-full flex-col items-center">
            @foreach(var member in _members) 
            {
                <div class="flex w-72 cursor-pointer flex-row items-center gap-5 rounded px-2 py-1 text-sm transition-all ease-in-out select-none hover:bg-dropdown-option" @onclick="() => SwitchMember(member)">
                    <div class="avatar mr-auto" style="background-image: url('@Constants.ACCESS_UPLOADED_IMAGES_PATH/@member.ProfilePictureFileName');"></div>
                    <label class="cursor-pointer">@member.DisplayName</label>
                    <i class='fa fa-check icon ml-auto @(!_assignable.Assignees.Any(x => x.Id.Equals(member.Id)) ? "opacity-0" : string.Empty)'></i>
                </div>
            }
        </div>
    }
</ActionModal>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [Parameter]
    public EventCallback UpdateCard {get; set;}

    private ActionModal? _modalRef;

    private IAssignable? _assignable;

    private List<User> _members = [];

    public void Open(ElementReference? triggerElement, IAssignable assignable, List<User> members) 
    {
        _assignable = assignable;
        _members = members;
        StateHasChanged();
        _modalRef?.Open(triggerElement);
    }

    public async Task SwitchMember(User member) 
    {
        if(_assignable is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        if (_assignable is Card card)
        {
            var targetCard = await db.Cards
                .Include(x => x.Assignees)
                .Include(x => x.Activities)
                .FirstOrDefaultAsync(x => x.Id.Equals(card.Id));

            if (targetCard is null)
                return;

            var targetUser = await db.Users.FirstOrDefaultAsync(x => x.Id.Equals(member.Id));

            if (targetUser is null)
                return;

            if (targetCard.Assignees.Contains(targetUser)) 
            {
                targetCard.Assignees.Remove(targetUser);
                targetCard.Activities.Add(new Activity
                {
                    Text = $"<b>removed</b> the user <b>{targetUser.DisplayName}</b> from the assignees",
                    UserId = _user.Id,
                    CardId = targetCard.Id,
                });
            }
            else 
            {
                targetCard.Assignees.Add(targetUser);
                targetCard.Activities.Add(new Activity
                {
                    Text = $"<b>added</b> the user <b>{targetUser.DisplayName}</b> as an assignee",
                    UserId = _user.Id,
                    CardId = targetCard.Id,
                });
            }

            await db.SaveChangesAsync();

            _assignable = targetCard;
            StateHasChanged();
            await UpdateCard.InvokeAsync();
        } else if (_assignable is Subtask subtask)
        {
            var targetSubtask = await db.Subtasks
                .Include(x => x.Assignees)
                .Include(x => x.Card)
                    .ThenInclude(x => x.Activities)
                .FirstOrDefaultAsync(x => x.Id.Equals(subtask.Id));

            if (targetSubtask is null)
                return;

            var targetUser = await db.Users.FirstOrDefaultAsync(x => x.Id.Equals(member.Id));

            if (targetUser is null)
                return;

            if (targetSubtask.Assignees.Contains(targetUser)) 
            {
                targetSubtask.Assignees.Remove(targetUser);
                targetSubtask.Card.Activities.Add(new Activity
                {
                    Text = $"<b>removed</b> the user <b>{targetUser.DisplayName}</b> from the subtask assignees",
                    UserId = _user.Id,
                    CardId = targetSubtask.CardId,
                });
            }
            else 
            {
                targetSubtask.Assignees.Add(targetUser);
                targetSubtask.Card.Activities.Add(new Activity
                {
                    Text = $"<b>added</b> the user <b>{targetUser.DisplayName}</b> as a subtask assignee",
                    UserId = _user.Id,
                    CardId = targetSubtask.CardId,
                });
            }

            await db.SaveChangesAsync();

            _assignable = targetSubtask;
            StateHasChanged();
            await UpdateCard.InvokeAsync();
        }
    }
}