@inject IJSRuntime _js

<div @ref="_element" class="dropdown absolute top-0 left-0 z-20 hidden overflow-y-auto rounded-xs bg-modal shadow-2xl">
	<section class="flex w-full flex-row items-center justify-center gap-10 px-2 py-3">
		<label class="text-sm font-normal">@Title</label>
		<i class="fa fa-xmark ml-auto cursor-pointer text-icon hover:text-icon-hover" @onclick="Close" title="Close"></i>
	</section>
	<hr/>
	<div class="px-2 py-2">
		@ChildContent
	</div>
</div>

@code {
	[Parameter]
	public required RenderFragment ChildContent { get; set; }

	[Parameter]
	public required string Title { get; set; }

	private ElementReference? _element;
	private string? _elementId;
	private ElementReference? _triggerElement;

	public async void Open(string elementId)
	{
		_elementId = elementId;
		await OnResized();

		if (_element.HasValue)
		{
			await _js.InvokeVoidAsync("trapFocusInElement", _element);
		}
	}

	public async void Open(ElementReference? triggerElement)
	{
		_triggerElement = triggerElement;
		await OnResized();

		if (_element.HasValue)
		{
			await _js.InvokeVoidAsync("trapFocusInElement", _element);
		}
	}

	public async Task OnResized()
	{
		if(_triggerElement is not null)
			await _js.InvokeVoidAsync("openDropDownOnElementPosition", _element, _triggerElement);

		if (_elementId is not null)
			await _js.InvokeVoidAsync("openDropDownOnElementId", _element, _elementId);
	}

	public async void Close() 
	{
		await _js.InvokeVoidAsync("closeDropdowns");
	}
}