@inject IJSRuntime _js

<div @ref="_element" @onclick="OpenMenu" @onclick:stopPropagation="true">
	@ChildContent
</div>

<div @ref="_dropdownElement" class="dropdown fixed top-0 left-0 z-10 hidden rounded-xs bg-modal text-app-text shadow select-none">
	<div class="flex flex-col text-center text-sm">
		@foreach(var action in Actions) 
		{
			<div class='cursor-pointer @(action.Key.Contains("Delete") || action.Key.Contains("Log out") ? "text-red-button" : string.Empty) px-8 py-1 transition-all hover:bg-dropdown-option' 
				@onclick="() => RunAction(action.Value)" @onclick:stopPropagation="true">@action.Key</div>
		}
	</div>
</div>


@code {
	[Parameter]
	public required RenderFragment ChildContent { get; set; }

	[Parameter]
	public required Dictionary<string, Action> Actions { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	private ElementReference? _element;

	private ElementReference? _dropdownElement;

	private async void OpenMenu(MouseEventArgs e)
	{
		if (Disabled)
			return;

		await _js.InvokeVoidAsync("onDropdownTriggerClicked", e.ClientX, e.ClientY, _dropdownElement);
	}

	private async void RunAction(Action action)
	{
		action.Invoke();
		await _js.InvokeVoidAsync("closeDropdowns");
	}
}