@inject IDbContextFactory<DataContext> _dbContextFactory

<div id="@Card.Id" data-blocked="@Card.Blocked.ToString()" class="task-card" @onclick="() => EditCardModal.Open(Card.Id, Members, Columns)">
    <div class="flex flex-row items-center justify-between gap-2">
        <div class="flex flex-row flex-wrap items-center justify-start gap-1">
            <PriorityLabel Priority="Card.Priority"/>
            @foreach(var label in Card.Labels) {
                <LabelView Label="label"></LabelView>
            }
        </div>

        <Dropdown Actions='new() {
                                { "Edit task", async () => await EditCardModal.Open(Card.Id, Members, Columns) },
                                { "Delete task", () => DeleteCardModal?.OpenDialog(Card) },
                                { $"{(Card.Blocked ? "Unmark" : "Mark")} as blocked", async () => await ChangeBlockedStatus() }
                            }'>
            <i class="fa fa-ellipsis card-button pr-1" title="Card options"></i>
        </Dropdown>
    </div>
    <label class="cursor-pointer text-xs break-all">
        @Card.Name
    </label>
    <div class="flex flex-row items-center justify-between gap-3">
        <div class="text-card-data-points flex w-full flex-row flex-wrap items-center justify-start gap-x-3 gap-y-1 text-xs">
            @if (Card.Deadline is not null)
            {
                DeadlineColor color = Column.Finished ? DeadlineColor.Green : (DateTime.Compare(Card.Deadline.Value, DateTime.Now) < 0 ? DeadlineColor.Red : (Card.Deadline.Value.Date == DateTime.Today.Date ? DeadlineColor.Yellow : DeadlineColor.Default));
                <label data-coloring="@color" class="card-data-point rounded-lg px-1 py-1 text-white capitalize data-[coloring=Default]:text-card-data-points data-[coloring=Default]:mx-[-0.25rem] data-[coloring=Green]:bg-green-500 data-[coloring=Yellow]:bg-yellow-500 data-[coloring=Red]:bg-red-500"><i class="fa fa-clock" title="Deadline"></i> @Card.Deadline.Value.ToShortString()</label>
            }
            <label class="card-data-point"><i class="fa fa-hashtag" title="Card ID"></i> @(BoardCode)-@Card.Number</label>
            @if (Card.Attachments.Any())
            {
                <label class="card-data-point"><i class="fa fa-paperclip" title="Attachments"></i> @Card.Attachments.Count</label>
            }
            @if (Card.Subtasks.Any())
            {
                <label class="card-data-point"><i class="fa fa-check" title="Subtasks"></i> @Card.Subtasks.Where(x => x.Completed).Count()/@Card.Subtasks.Count</label>
            }
            @{
                var trackedTime = new TimeSpan(Card.TimeRecords.Select(x => ((x.EndedAt ?? DateTime.Now) - x.StartedAt).Ticks).Sum()).ToElapsedString(true);
            }
            @if (!string.IsNullOrWhiteSpace(trackedTime))
            {
                <label class="card-data-point"><i class="fa fa-stopwatch" title="Time tracked"></i> @trackedTime</label>
            }
            @if(Card.Blocked)
            {
                <label class="card-data-point text-card-blocked-text"><i class="fa fa-flag" title="Blocked"></i> Blocked</label>
            }
            @if (Card.SnoozedUntil is not null)
            {
                <label class="card-data-point"><i class="fa fa-moon" title="Snoozed until"></i> @(Card.SnoozedUntil.Value.ToShortString())</label>
            }
            @if (!string.IsNullOrWhiteSpace(Card.Description))
            {
                <label class="card-data-point"><i class="fa fa-align-left" title="Has description"></i></label>
            }
            @if(Card.RepeatInfo is not null)
            {
                <label class="card-data-point"><i class="fa fa-repeat" title="Repeating task"></i> @(LongFormRepeat ? $"{Card.RepeatInfo.GetRepeatString()}, next repeat {_nextRepeat}" : string.Empty)</label>
            }
        </div>
        <div class="flex">
            @foreach(var assignee in Card.Assignees) 
            {
                <div class="avatar stack-avatars !ml-[-0.8rem] !h-6 !w-6" style="background-image: url('@Constants.ACCESS_UPLOADED_IMAGES_PATH/@assignee.ProfilePictureFileName');"></div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public required EditCardModal EditCardModal {get; set;}

    [Parameter]
    public required DeleteConfirmationDialog<Card> DeleteCardModal { get; set; }

    [Parameter]
    public required Card Card { get; set; }

    [Parameter]
    public required Column Column { get; set; }

    [Parameter]
    public required string BoardCode { get; set; }

    [Parameter]
    public required List<User> Members { get; set; }

    [Parameter]
    public required List<Column> Columns { get; set; }

    [Parameter]
    public bool LongFormRepeat { get; set; }

    [Parameter]
    public EventCallback OnCardUpdated { get; set; }

    private string? _nextRepeat;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(Card.RepeatInfo is not null)
            _nextRepeat = Card.CalculateNextRepeat(DateTime.Now).ToReadableStringWithTime();
    }

    private async Task ChangeBlockedStatus()
    {
        using var db = _dbContextFactory.CreateDbContext();

        var card = await db.Cards.FindAsync(Card.Id);

        if (card is null)
            return;

        card.Blocked = !card.Blocked;

        await db.SaveChangesAsync();
        StateHasChanged();
        await OnCardUpdated.InvokeAsync();
    }
}
