@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject ILogger<SubtaskView> _logger

@inherits NotifiableBase

<div id="@Subtask.Id" class="flex flex-row items-center gap-2 text-sm font-normal">
	<i class="fa fa-grip-lines-vertical drag-toggle icon-button cursor-move text-icon" title="Drag to reorder subtask"></i>
	<input id="subtask_checkbox_@Subtask.Id" type="checkbox" checked="@Subtask.Completed" @onchange="OnSubtaskStatusChanged" />
	<label for="subtask_checkbox_@Subtask.Id">@Subtask.Text</label>
	<i id="subtask_edit_@Subtask.Id" class="fa fa-pencil edit-icon" @onclick='() => EditSubtaskModal?.Open($"subtask_edit_{Subtask.Id}", Subtask)' title="Edit subtask"></i>
	<i class="fa fa-trash-can edit-icon !text-red-button hover:!text-red-button-hover" @onclick="DeleteSubtask" title="Delete subtask"></i>
</div>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User _user { get; set; } = default!;

    [CascadingParameter(Name = Constants.CascadingParameters.MainLayout)]
    private MainLayout _mainLayout { get; set; } = default!;

    [Parameter]
    public required Subtask Subtask { get; set; }

    [Parameter]
    public EditSubtaskModal? EditSubtaskModal { get; set; }

    [Parameter]
    public EventCallback UpdateCard { get; set; }

    private async Task OnSubtaskStatusChanged(ChangeEventArgs e)
    {
	try
        {
            using var db = _dbContextFactory.CreateDbContext();
            var target = await db.Subtasks
                .Include(x => x.Card)
                    .ThenInclude(x => x.Activities)
                .FirstOrDefaultAsync(x => x.Id.Equals(Subtask.Id));

            if (target is null)
                return;

            target.Completed = e.Value is not null ? (bool)e.Value : false;

            target.Card.Activities.Add(new Activity
            {
                Text = $"<b>marked</b> the subtask <b>{target.Text}</b> as <b>{(target.Completed ? "completed" : "to be done")}</b>",
                UserId = _user.Id,
                CardId = target.CardId,
            });

            await db.SaveChangesAsync();
            await UpdateCard.InvokeAsync();
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to change subtask status.");
            _mainLayout.RunNotification(new Notification("Failed to update subtask status.", NotificationType.Fail));
        }
    }

    private async Task DeleteSubtask()
    {
        try
        {
            using var db = _dbContextFactory.CreateDbContext();

            var sub = await db.Subtasks
                .Include(x => x.Card)
                    .ThenInclude(x => x.Activities)
                .FirstOrDefaultAsync(x => x.Id.Equals(Subtask.Id));

            if (sub is null)
                return;

            sub.Card.Activities.Add(new Activity
            {
                Text = $"<b>deleted</b> subtask <b>{sub.Text}</b>",
                UserId = _user.Id,
                CardId = sub.CardId,
            });

            db.Subtasks.Remove(sub);

            var card = await db.Cards.Include(x => x.Subtasks).FirstOrDefaultAsync(x => x.Id.Equals(sub.CardId));
            if (card is not null)
            {
                IndexHelper.FixIndices(card.Subtasks);
            }

            await db.SaveChangesAsync();
            await UpdateCard.InvokeAsync();
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to delete subtask.");
            _mainLayout.RunNotification(new Notification("Failed to delete subtask.", NotificationType.Fail));
        }
    }
}
